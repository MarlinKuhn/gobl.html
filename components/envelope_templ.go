// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.590
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"github.com/invopop/gobl"
	"github.com/invopop/gobl.html/components/bill/invoice"
	"github.com/invopop/gobl.html/components/notes"
	"github.com/invopop/gobl/bill"
	"github.com/invopop/gobl/note"
)

func Envelope(env *gobl.Envelope) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<html data-theme=\"light\"><head><title>GOBL HTML Generator</title><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"><link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin><link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@100..900&amp;display=swap\" rel=\"stylesheet\"><style type=\"text/css\">\n\t\t\t\t@page {\n\t\t\t\t\tfont-family: \"Inter\", sans-serif;\n\t\t\t\t\tsize: A4 portrait;\n\t\t\t\t\tmargin: 10mm;\n\t\t\t\t\tmargin-bottom: 20mm;\n\t\t\t\t\tcounter-increment: page;\n\t\t\t\t\tfont-size: 9pt;\n\t\t\t\t\tline-height: 1.5em;\n\t\t\t\t\tcolor: #4B5563;\n\t\t\t\t}\n\t\t\t\tbody {\n\t\t\t\t\tfont-family: \"Inter\", sans-serif;\n\t\t\t\t\tfont-size: 9pt;\n\t\t\t\t\tline-height: 1.5em;\n\t\t\t\t\tmargin: 0;\n\t\t\t\t\tmargin-bottom: 0mm;\n\t\t\t\t\t/* color: #030712; */\n\t\t\t\t\t/* color: #6B7280; */\n\t\t\t\t\tcolor: #4B5563;\n\t\t\t\t}\n\t\t\t\t@media screen {\n\t\t\t\t\tbody {\n\t\t\t\t\t\tmargin: 10mm;\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\tarticle.envelope {\n\t\t\t\t\tmin-height: 100%;\n\t\t\t\t}\n\t\t\t\tarticle, section, header, div, h1, h2, h3, h4, table, th, td, p {\n\t\t\t\t\tfont-size: 1em;\n\t\t\t\t\tmargin: 0;\n\t\t\t\t}\n\t\t\t\th1, h2, h3, h4 {\n\t\t\t\t\tfont-weight: 500;\n\t\t\t\t\t/* color: #030712; */\n\t\t\t\t}\n\t\t\t\ta {\n\t\t\t\t\tcolor: #4B5563;\n\t\t\t\t}\n\t\t\t\ttable {\n\t\t\t\t\tborder-spacing: 0;\n\t\t\t\t\tborder-collapse: collapse;\n\t\t\t\t}\n\t\t\t\tth, td {\n\t\t\t\t\ttext-align: left;\n\t\t\t\t}\n\t\t\t\tsection.footer span.page-number:before {\n\t\t\t\t\tcontent: counter(page);\n\t\t\t\t}\n            </style></head><body><article class=\"envelope\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = footerPrint(env).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		switch doc := env.Extract().(type) {
		case *bill.Invoice:
			templ_7745c5c3_Err = invoice.Invoice(env, doc).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		case *note.Message:
			templ_7745c5c3_Err = notes.Message(doc).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		default:
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<p>Unkown document type</p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = footerScreen(env).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</article></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
